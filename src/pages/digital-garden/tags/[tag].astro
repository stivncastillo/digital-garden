---
import Note from "@components/Notes/Note.astro";
import type { MarkdownInstance } from "astro";
import Layout from '../../../layouts/Layout.astro';
import type { NotesFrontMatter } from "../../../types";

const allNotesPrint = await Astro.glob<MarkdownInstance<NotesFrontMatter>>('../../digital-garden/*.{md,mdx}');
  const uniqueTagsPrint = [...new Set(allNotesPrint.map((notes) => notes.frontmatter.tags).flat())];


export async function getStaticPaths() {
  const allNotes = await Astro.glob<MarkdownInstance<NotesFrontMatter>>('../../digital-garden/*.{md,mdx}');

  const uniqueTags = [...new Set(allNotes.map((notes) => notes.frontmatter.tags).flat())];

  return uniqueTags?.map((tag) => {
    const filteredNotes = allNotes.filter((notes) => notes.frontmatter.tags && notes.frontmatter.tags.includes(tag ?? ''));
    return {
      params: { tag },
      props: { notes: filteredNotes },
    };
  });
}

interface Props {
  notes: Array<MarkdownInstance<NotesFrontMatter>>
}

const { tag } = Astro.params;
const { notes } = Astro.props;
---
<Layout title={`Notes tagged with '${tag}'`} description={`Notes tagged with '${tag}'`}>
  <div class="flex flex-col flex-1 h-full">
    <span class="text-sm">Notes tagger with</span>
    <h1 class=" italic">{tag}</h1>

    <section class="my-4">
      <ul class="grid grid-cols-1 md:grid-cols-2 gap-2">
        {
          notes?.map(({ url, frontmatter: { title, description } }) => (
            <Note url={url} title={title} description={description} />
          ))
        }
      </ul>

      {allNotesPrint.length}
      {uniqueTagsPrint.join(', ')}
    </section>



  </div>

</Layout>